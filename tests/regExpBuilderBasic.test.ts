import RegExpToken from '../src/regExpToken';

const prefix = 'test.regexp';
test(`${prefix}.basic`, () => {
	expect(RegExpToken.alphanumeric.source).toBe('\\w');
	expect(RegExpToken.any.source).toBe('.');
	expect(RegExpToken.asterisk).toBe('*');
	expect(RegExpToken.backslash).toBe('\\');
	expect(RegExpToken.backspace.source).toBe('[\\b]');
	expect(RegExpToken.begin.source).toBe('^');
	expect(RegExpToken.carriageReturn.source).toBe('\\r');
	expect(RegExpToken.caseInsensitiveSearchFlag).toBe('i');
	expect(RegExpToken.characterSet('x', 'y', 'z').source).toBe('[xyz]');
	expect(RegExpToken.negatedCharacterSet('x', 'y', 'z').source).toBe('[^xyz]');
	expect(RegExpToken.digit.source).toBe('\\d');
	expect(RegExpToken.digit.source).toBe('\\d');
	expect(RegExpToken.dot.source).toBe('.');
	expect(RegExpToken.dotIsNewLineFlag).toBe('s');
	expect(RegExpToken.end.source).toBe('$');
	expect(RegExpToken.formfeed.source).toBe('\\f');
	expect(RegExpToken.globalSearchFlag).toBe('g');
	expect(RegExpToken.hex('0A').source).toBe('\\x0A');
	expect(RegExpToken.linefeed.source).toBe('\\n');
	expect(RegExpToken.lookahead('x', 'y').source).toBe('x(?=y)');
	expect(RegExpToken.lookbehind('x', 'y').source).toBe('(?<=y)x');
	expect(RegExpToken.more).toBe('*');
	expect(RegExpToken.multipleLineSearchFlag).toBe('m');
	expect(RegExpToken.negatedLookahead('x', 'y').source).toBe('x(?!y)');
	expect(RegExpToken.negatedLookbehind('x', 'y').source).toBe('(?<!y)x');
	expect(RegExpToken.nonCapturingParentheses('x').source).toBe('(?:x)');
	expect(RegExpToken.nonDigit.source).toBe('\\D');
	expect(RegExpToken.nonWhitespace.source).toBe('\\S');
	expect(RegExpToken.nonWord.source).toBe('\\W');
	expect(RegExpToken.nonWordBoundary.source).toBe('\\B');
	expect(RegExpToken.null.source).toBe('\\0');
	expect(RegExpToken.occurrence(5)).toBe('{5}');
	expect(RegExpToken.occurrenceOrMore(5)).toBe('{5, }');
	expect(RegExpToken.occurrenceOrMore(5, 10)).toBe('{5, 10}');
	expect(RegExpToken.oneOrMore).toBe('+');
	expect(RegExpToken.or('x', 'y').source).toBe('x|y');
	expect(RegExpToken.plus).toBe('+');
	expect(RegExpToken.questionmark).toBe('?');
	expect(RegExpToken.strickySearchFlag).toBe('y');
	expect(RegExpToken.tab.source).toBe('\\t');
	expect(RegExpToken.unicode('AAAA').source).toBe('\\uAAAA');
	expect(RegExpToken.unicodeFlag).toBe('u');
	expect(RegExpToken.unicodeU('AAAA').source).toBe('\\u{AAAA}');
	expect(RegExpToken.verticalTab.source).toBe('\\v');
	expect(RegExpToken.whitespace.source).toBe('\\s');
	expect(RegExpToken.wordBoundary.source).toBe('\\b');
	expect(RegExpToken.zeroOrOne).toBe('?');
});

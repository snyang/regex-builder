import { RegExpSpec } from '../src/regExpSpec';

const prefix = 'test.regexp';
test(`${prefix}.basic`, () => {
	expect(RegExpSpec.alphanumeric).toBe('\\w');
	expect(RegExpSpec.any).toBe('.');
	expect(RegExpSpec.asterisk).toBe('*');
	expect(RegExpSpec.backslash).toBe('\\');
	expect(RegExpSpec.backspace).toBe('[\\b]');
	expect(RegExpSpec.begin).toBe('^');
	expect(RegExpSpec.capturingParentheses('x')).toBe('(x)');
	expect(RegExpSpec.capturingParentheses('x', 'var')).toBe('(?<var>:x)');
	expect(RegExpSpec.carriageReturn).toBe('\\r');
	expect(RegExpSpec.caseInsensitiveSearchFlag).toBe('i');
	expect(RegExpSpec.characterSet('x', 'y', 'z')).toBe('[xyz]');
	expect(RegExpSpec.negatedCharacterSet('x', 'y', 'z')).toBe('[^xyz]');
	expect(RegExpSpec.digit).toBe('\\d');
	expect(RegExpSpec.dot).toBe('.');
	expect(RegExpSpec.dotIsNewLineFlag).toBe('s');
	expect(RegExpSpec.end).toBe('$');
	expect(RegExpSpec.formfeed).toBe('\\f');
	expect(RegExpSpec.globalSearchFlag).toBe('g');
	expect(RegExpSpec.hex('0A')).toBe('\\x0A');
	expect(RegExpSpec.linefeed).toBe('\\n');
	expect(RegExpSpec.lookahead('x', 'y')).toBe('x(?=y)');
	expect(RegExpSpec.lookbehind('x', 'y')).toBe('(?<=y)x');
	expect(RegExpSpec.more).toBe('*');
	expect(RegExpSpec.multipleLineSearchFlag).toBe('m');
	expect(RegExpSpec.negatedLookahead('x', 'y')).toBe('x(?!y)');
	expect(RegExpSpec.negatedLookbehind('x', 'y')).toBe('(?<!y)x');
	expect(RegExpSpec.nonCapturingParentheses('x')).toBe('(?:x)');
	expect(RegExpSpec.nonDigit).toBe('\\D');
	expect(RegExpSpec.nonWhitespace).toBe('\\S');
	expect(RegExpSpec.nonWord).toBe('\\W');
	expect(RegExpSpec.nonWordBoundary).toBe('\\B');
	expect(RegExpSpec.null).toBe('\\0');
	expect(RegExpSpec.occurrence(5)).toBe('{5}');
	expect(RegExpSpec.occurrenceOrMore(5)).toBe('{5, }');
	expect(RegExpSpec.occurrenceOrMore(5, 10)).toBe('{5, 10}');
	expect(RegExpSpec.oneOrMore).toBe('+');
	expect(RegExpSpec.or('x', 'y')).toBe('x|y');
	expect(RegExpSpec.plus).toBe('+');
	expect(RegExpSpec.questionmark).toBe('?');
	expect(RegExpSpec.strickySearchFlag).toBe('y');
	expect(RegExpSpec.tab).toBe('\\t');
	expect(RegExpSpec.unicode('AAAA')).toBe('\\uAAAA');
	expect(RegExpSpec.unicodeFlag).toBe('u');
	expect(RegExpSpec.unicodeU('AAAA')).toBe('\\u{AAAA}');
	expect(RegExpSpec.verticalTab).toBe('\\v');
	expect(RegExpSpec.whitespace).toBe('\\s');
	expect(RegExpSpec.wordBoundary).toBe('\\b');
	expect(RegExpSpec.zeroOrOne).toBe('?');
});
